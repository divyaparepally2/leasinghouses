import React, { useEffect, useRef, useState, useCallback } from 'react';
import { Loader } from '@googlemaps/js-api-loader';
import PlaceCard from './placeCard';
import { Col } from 'react-bootstrap';


const containerStyle = {
  width: '60%',
  height: '500px',
};

const App = () => {
  const mapRef = useRef(null);
  const googleRef = useRef(null);
  const [searchQuery, setSearchQuery] = useState('');
  // const [mapLoaded, setMapLoaded] = useState(false);
  const [markers, setMarkers] = useState([]);
  const [places, setPlaces] = useState([]);


  const clearMarkers = useCallback(() => {
    setMarkers((prevMarkers) => {
      prevMarkers.forEach((marker) => {
        marker.setMap(null); // Remove marker from map
      });
      return []; // Clear marker list
    });
  }, []);

  const searchNearbyHospitals = useCallback((location) => {
    const service = new googleRef.current.maps.places.PlacesService(mapRef.current);
  
    clearMarkers();
  
    const infowindow = new googleRef.current.maps.InfoWindow();
  
    service.nearbySearch(
      {
        location,
        radius: 3000,
        type: 'hospital',
      },
      (results, status) => {
        if (status === googleRef.current.maps.places.PlacesServiceStatus.OK) {
          const newMarkers = results.map((place) => {
            const marker = new googleRef.current.maps.Marker({
              map: mapRef.current,
              position: place.geometry.location,
              title: place.name,
            });
  
            marker.addListener('mouseover', () => {
              infowindow.setContent(`
                <div>
                  <strong>${place.name}</strong><br/>
                  ${place.vicinity || ''}
                </div>
              `);
              infowindow.open(mapRef.current, marker);
            });
  
            marker.addListener('mouseout', () => {
              infowindow.close();
            });
  
            return marker;
          });
          
          setMarkers(newMarkers);
          setPlaces(results);
        } else {
          console.error('PlacesService failed:', status);
          alert('No hospitals found nearby.');
        }
      }
    );
  }, [clearMarkers]);

  const handleSearch = useCallback(() => {
    console.log('handle clicked lo', searchQuery)
    if (!googleRef.current || !mapRef.current || !searchQuery) return;

    const geocoder = new googleRef.current.maps.Geocoder();
    console.log('geocoder', geocoder)
    geocoder.geocode({ address: searchQuery }, (results, status) => {
      if (status === 'OK') {
        const location = results[0].geometry.location;
        const bounds = results[0].geometry.viewport;
        console.log('location', results);
        console.log('Viewport bounds:', bounds);
    // Fit map to bounds (for better zoom and framing)
        mapRef.current.fitBounds(bounds);

        // NEW: Draw rectangle to show boundary
        new googleRef.current.maps.Rectangle({
          bounds: bounds,
          map: mapRef.current,
          strokeColor: '#FF0000',
          strokeOpacity: 0.8,
          strokeWeight: 2,
          fillColor: '#FF0000',
          fillOpacity: 0.1,
        });
        // console.log('Rectangle created:', rect);
        // mapRef.current.setCenter(location);
        searchNearbyHospitals(location);
      } else {
        console.error(`Geocoding failed with status: ${status}`);
        alert('Location not found.');
      }
    });
  },[searchNearbyHospitals, searchQuery]);

  useEffect(() => {
    const loader = new Loader({
      apiKey: 'AIzaSyCIur_CuwGeaZRCho1sYuB4RFN391qEEKk', // Replace with your API key
      version: 'weekly',
      libraries: ['places', 'geometry'], // Ensure 'marker' library is included
    });

    loader.load().then((google) => {
      googleRef.current = google;
      const map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: 37.7749, lng: -122.4194 }, // default center
        zoom: 13,
        mapId: '6c1889787779912c'
      });

      mapRef.current = map;
      map.addListener('click', (e) => {
        const clickedLocation = e.latLng;
        map.setCenter(clickedLocation);
        console.log('clickedLocation', clickedLocation)
        // setSearchQuery(e.target.value)}
        handleSearch();
        searchNearbyHospitals(clickedLocation);  // ← This must run!
      });
      // setMapLoaded(true);
    });
  }, [searchNearbyHospitals, handleSearch]);

  // const handleSearch = () => {
  //   if (!googleRef.current || !mapRef.current || !searchQuery) return;

  //   const geocoder = new googleRef.current.maps.Geocoder();
  //   geocoder.geocode({ address: searchQuery }, (results, status) => {
  //     if (status === 'OK') {
  //       const location = results[0].geometry.location;
  //       const bounds = results[0].geometry.viewport;
  //       console.log('Viewport bounds:', bounds);
  //   // Fit map to bounds (for better zoom and framing)
  //       mapRef.current.fitBounds(bounds);
  //       console.log('bounds', bounds)

  //       // NEW: Draw rectangle to show boundary
  //       new googleRef.current.maps.Rectangle({
  //         bounds: bounds,
  //         map: mapRef.current,
  //         strokeColor: '#FF0000',
  //         strokeOpacity: 0.8,
  //         strokeWeight: 2,
  //         fillColor: '#FF0000',
  //         fillOpacity: 0.1,
  //       });
  //       // console.log('Rectangle created:', rect);
  //       // mapRef.current.setCenter(location);
  //       searchNearbyHospitals(location);
  //     } else {
  //       console.error(`Geocoding failed with status: ${status}`);
  //       alert('Location not found.');
  //     }
  //   });
  // };

  // const handleSearch = async () => {
  //   if (!googleRef.current || !mapRef.current || !searchQuery) return;

  //   const geocoder = new googleRef.current.maps.Geocoder();
  //   geocoder.geocode({ address: searchQuery }, async (results, status) => {
  //     if (status === 'OK') {
  //       const location = results[0].geometry.location;
  //       mapRef.current.setCenter(location);

  //       // Fetch boundary data for the searched city
  //       const cityBoundary = await fetchCityBoundary(searchQuery);
  //       if (cityBoundary) {
  //         displayCityBoundary(cityBoundary);
  //       }

  //       // Optionally, search for nearby hospitals or places here
  //       searchNearbyHospitals(location);
  //     } else {
  //       console.error(`Geocoding failed with status: ${status}`);
  //       alert('Location not found.');
  //     }
  //   });
  // };

  // const fetchCityBoundary = async (cityName) => {
  //   try {
  //     const apiKey = 'AIzaSyCIur_CuwGeaZRCho1sYuB4RFN391qEEKk'; // Replace with your Geoapify API key
  //     const response = await fetch(`https://api.geoapify.com/v1/boundaries?city=${cityName}&type=city&apiKey=${apiKey}`);
  //     const data = await response.json();

  //     if (data.features && data.features.length > 0) {
  //       // Return the GeoJSON data for the city's boundary
  //       return data.features[0].geometry;
  //     } else {
  //       console.error('No boundary data found for city:', cityName);
  //       return null;
  //     }
  //   } catch (error) {
  //     console.error('Error fetching city boundary data:', error);
  //     return null;
  //   }
  // };

  // const displayCityBoundary = (boundaryData) => {
  //   if (!boundaryData) return;

  //   // Create a new Google Maps Data layer to display the boundary
  //   const cityBoundaryLayer = new googleRef.current.maps.Data();
  //   cityBoundaryLayer.addGeoJson(boundaryData);

  //   // Style the boundary (optional)
  //   cityBoundaryLayer.setStyle({
  //     strokeColor: '#FF0000',
  //     strokeWeight: 2,
  //     fillColor: '#FF0000',
  //     fillOpacity: 0.2,
  //   });

  //   // Add to the map
  //   cityBoundaryLayer.setMap(mapRef.current);
  // };

  

  // const searchNearbyHospitals = async (location) => {
  //   const { Place } = googleRef.current.maps.places;

  //   try {
  //       const request = {
  //         location,
  //         radius: 3000,
  //         type: 'hospital',
  //       };
  //         const { places } = await Place.searchNearby(request);

  //         if (places.length === 0) {
  //           alert('No hospitals found nearby.');
  //           return;
  //         }
  //         clearMarkers(); // Clear old ones

  //         const infowindow = new googleRef.current.maps.InfoWindow(); // Reuse single instance

  //         const newMarkers = places.map((place) => {
  //           const marker = new googleRef.current.maps.Marker({
  //             map: mapRef.current,
  //             position: place.geometry.location,
  //             title: place.name,
  //           });

  //           marker.addListener('mouseover', () => {
  //             infowindow.setContent(`
  //               <div>
  //                 <strong>${place.displayName || place.name}</strong><br/>
  //                 ${place.formattedAddress || ''}
  //               </div>
  //             `);
  //             infowindow.open(mapRef.current, marker);
  //           });

  //           marker.addListener('mouseout', () => {
  //             infowindow.close();
  //           });

  //           return marker;
  //         });

  //         setMarkers(newMarkers);
  //         // results.forEach((place) => {
  //         //   console.log('Place found:', place); // Debug log

  //         //   const marker = new googleRef.current.maps.marker.AdvancedMarkerElement({
  //         //     map: mapRef.current,
  //         //     position: place.geometry.location,
  //         //     title: place.name,
  //         //   });

  //         //   // Optional hover effect
  //         //   marker.addListener('mouseover', () => {
  //         //     const infowindow = new googleRef.current.maps.InfoWindow({
  //         //       content: `<div><strong>${place.name}</strong></div>`,
  //         //     });
  //         //     infowindow.open(mapRef.current, marker);
  //         //   });
  //         // });
  //       // } 
  //       // else {
  //       //   console.error('No hospitals found nearby.');
  //       //   alert('No hospitals found nearby.');
  //       // }
  //     } catch (error) {
  //       console.error('Error using Place.searchNearby:', error);
  //       alert('Failed to fetch hospitals.');
  //     }
      
  //   // );
  // };

  return (
    <>
      <div style={{ padding: '10px', display: 'flex', gap: '10px' }}>
        <input
          type="text"
          value={searchQuery}
          placeholder="Enter a location"
          onChange={(e) => setSearchQuery(e.target.value)}
          style={{ flex: 1, padding: '8px' }}
        />
        <button onClick={handleSearch} style={{ padding: '8px 12px' }}>
          Search
        </button>
      </div>

    <div>
    <div id="map" style={containerStyle}></div>

    <div>
    {places.map((place, idx) => (
      <Col md={4} sm={6} xs={12} key={idx}>
        <PlaceCard place={place} />
      </Col>
    ))}
    </div>
    </div>
      
      
      
    </>
  );
};

export default App;


// after geoapify
// import React, { useState, useEffect, useRef } from 'react';
// import { Col } from 'react-bootstrap';
// import PlaceCard from './placeCard';

// const containerStyle = {
//   width: '100%',
//   height: '500px',
// };

// const App = () => {
//   const [searchQuery, setSearchQuery] = useState('');
//   const [places, setPlaces] = useState([]);
//   const [loading, setLoading] = useState(false);
//   const geoapifyApiKey = 'fb316171aa834bdd9403da61821e36b0'; // Replace with your actual Geoapify API key
//   const mapRef = useRef(null);
//   const [markers, setMarkers] = useState([]);

//   // Clear existing markers
//   const clearMarkers = () => {
//     markers.forEach(marker => {
//       marker.remove();
//     });
//     setMarkers([]);
//   };

//   // Fetch coordinates based on search query
//   const fetchCoordinates = async (query) => {
//     const url = `https://api.geoapify.com/v1/geocode/search?text=${encodeURIComponent(query)}&limit=1&apiKey=${geoapifyApiKey}`;
//     const response = await fetch(url);
//     const data = await response.json();
//     if (data.features.length > 0) {
//       const { lat, lon } = data.features[0].properties;
//       return { lat, lon };
//     }
//     return null;
//   };

//   // Search for nearby hospitals based on coordinates
//   const searchNearbyHospitals = async (lat, lon) => {
//     const url = `https://api.geoapify.com/v2/places?categories=healthcare.hospital&filter=circle:${lon},${lat},3000&limit=20&apiKey=${geoapifyApiKey}`;
//     const response = await fetch(url);
//     const data = await response.json();

//     // Create markers for each hospital
//     const newMarkers = data.features.map((f) => {
//       const { name, formatted } = f.properties;
//       const [markerLat, markerLon] = f.geometry.coordinates;

//       const marker = new window.AgMap.Marker({
//         position: [markerLat, markerLon],
//         map: mapRef.current,
//         title: name,
//       });

//       marker.addListener('mouseover', () => {
//         const infowindow = new window.AgMap.InfoWindow({
//           content: `
//             <div>
//               <strong>${name}</strong><br/>
//               ${formatted}
//             </div>
//           `,
//         });
//         infowindow.open(mapRef.current, marker);
//       });

//       marker.addListener('mouseout', () => {
//         const infowindow = new window.AgMap.InfoWindow();
//         infowindow.close();
//       });

//       return marker;
//     });

//     setMarkers(newMarkers);
//     setPlaces(data.features);
//   };

//   // Handle search function
//   const handleSearch = async () => {
//     setLoading(true);
//     const coords = await fetchCoordinates(searchQuery);
//     if (coords) {
//       clearMarkers(); // Clear any old markers
//       searchNearbyHospitals(coords.lat, coords.lon); // Fetch hospitals and add markers

//       // Initialize the map using the Geoapify Web Map SDK
//       if (mapRef.current) {
//         const map = new window.AgMap.Map(mapRef.current, {
//           center: [coords.lat, coords.lon],
//           zoom: 13,
//           apiKey: geoapifyApiKey,
//         });

//         map.setCenter([coords.lat, coords.lon]);
//       }
//     } else {
//       alert('Location (city or address) not found');
//     }
//     setLoading(false);
//   };

//   return (
//     <>
//       <div style={{ padding: '10px', display: 'flex', gap: '10px' }}>
//         <input
//           type="text"
//           value={searchQuery}
//           placeholder="Enter a location (city or address)"
//           onChange={(e) => setSearchQuery(e.target.value)}
//           style={{ flex: 1, padding: '8px' }}
//         />
//         <button onClick={handleSearch} style={{ padding: '8px 12px' }}>
//           {loading ? 'Loading...' : 'Search'}
//         </button>
//       </div>

//       <div ref={mapRef} style={containerStyle}></div>

//       <div>
//         {places.map((place, idx) => (
//           <Col md={4} sm={6} xs={12} key={idx}>
//             <PlaceCard place={place} />
//           </Col>
//         ))}
//       </div>
//     </>
//   );
// };

// export default App;
